Tutorial for API googlebooks
source https://www.youtube.com/watch?v=uI_UP0pgsDE
documentation

Before:
//source : https://developers.google.com/books/docs/v1/getting_started

-avoir un compte google pour pouvoir faire des test sur google books 
https://books.google.com/
-faire connaissance avec l'interface google books
-se renseigner sur les autorisations et identifier son application:
https://developers.google.com/books/docs/v1/using#auth

Les Books API:
Google books est construit sur 4 concepts fondamentaux:
-le volume: un volume represente les données que google books fait office de serveur à proposde livres et de magazines
-l'étagère: c'est une collection de volumes. Google books approvisionne un pack d'étagères prédifinies pour chaque utilisateur, certaines sont gerées entièrement par l'utilsateur, certaines sont automatiquement remplis en se basant sur l'activité de l'utilisateur, certaines sont un mix des deux. Les utilisateurs peuvent créer, modifier ou effacer d'autres étagères, qui sont toujours remplis de volumes de façon manuelle.Les étagères peuvent être publiques ou privées.
-les avis: les notations d'un livre
-la page où tu es en train de lire: indique où le lecteur est en train de lire


Le data model de Google Books API (GB API)

Une ressource est une structure de données individuelles avec un identifiant unique. GB API opère sur 2 types de ressources, basé sur les concepts décrits au dessus:
-ressource de volumes: représente un volume
-ressource sur l'étagère: représente une seule étagère pour un utilisateur particulier.

Le data model GB API est basé sur des groupes de ressources => les collections.


-"Volume collection": c'est une collection de chaque ressource de volumes  gérée par GB. Vous ne pouvez pas lister tous les ressources de volume mais vous pouvez lister tous les volumes qui correspondent à une série de termes rechercheées.
-"bookshelf collection": concerne les "bookshelf collection". Les étagères doivent toujours être referencé dans le contexte de la bibliothèque de l'utilisateur specifique. Les etagères peuvent contenir 0 ou plusieurs volumes.

Google apporte un bouquet d'étagères prédéfinies pour chaque utilisateur:

-Favoris= étagère changeable
-Achetés= remplis avec des volumes que l'utilisateur a acheté. L'utilisateur ne paut pas manuellement ajouter ou enlever des volumes.
-à lire = étagère changeable
-En train de lire= étagère changeable
-déjà lus= étagère changeable
-critiqués= remplis avec des volumes que l'utilisateur a acheté. L'utilisateur ne paut pas manuellement ajouter ou enlever des volumes.
-recemment vus = remplis avec des volumes que l'utilisateur a recemment ouvert sur un "web reader".
- mes livres numériques=livres acheté qui sont automatiquement ajoutés, mais peut être manuellement enlevé
- Livres pour toi= remplis avec des recommandations de volume personalisé. SI nous n'avons aucune recommendations pour l'utilisateur, cet étagère n'existe pas.

Exemple d'étagères:
- Favoris:
	-Harry Potter
- Mes ebooks
	-Switch
	-Twilight
	-The Girl with the Dragon Tattoo

GB API operations

Vous pouvez invoquer 5 différentes méthodes dans les collections et les ressources dans GB API comme décri dans le tableau suivant.
//cf:https://developers.google.com/books/docs/v1/getting_started
Les opérations qui sont supportées pour différents types de ressources sont résumé dans le tableau au dessous. Des opérations qui s'appliquent à des données privées à un utilisateur sont nommées "Ma bibliothèque" et requierent tous une authentification
//cf:https://developers.google.com/books/docs/v1/getting_started

Faire appel aux styles

Il y a différentes manières d'invoquer l'API
-utilisant directement REST
-Utilisant REST à partir de Javascript(par de code coté serveur requis)

REST

REST est un style d'architecture de software qui apporte une approche cohérente et adéquate pour demander et modifier des données.

Pour Google API, il se refère à l'utilisation des verbes HTTP pourrécupérer et modifier des representations de données stockés par google.

Dans un système RESTful, des ressources sont stockées dans un magasin de données. Un client envoie une requete que le serveur exécute une action particulière( comme creér, récupérer, actualiser ou effacer une ressource) et le serveur execute l'action et envoie une réponse, souvent dansla forme d'une représentation d'une ressource spécifique.

Dans G. RESTful APIs, le client specifie une action en utilisant un verb HTTP comme POST GET PUT ou DELETE. Il specifie une ressource par un URI de cette forme suivante:

https://www.googleapis.com/apiName/apiVersion/resourcePath?parameters

Parce que toutes les ressources API ont un URI HTTP accessible unique, REST active une mise en cache des données et est optimisé pour travailler dans "web's distributed infrastructure"
Pour plus d'infos à propos de REST, vous pouvez trouver les documents utiles par une tierce personne :
-building web services the REST Way: http://www.xfront.com/REST-Web-Services.html
-HTTP1.1 method definition, specification for GET POST PUT DELETE -> https://tools.ietf.org/html/rfc7231#section-4.3

REST dans Books API
"The supported Books operations map directly to REST HTTP verbs, as described in Books API operations."

Le format specific des Books API URI est:
https://www.googleapis.com/books/v1/{collectionName}/resourceID?parameters

où ressourceID est l'identifiant pour un volume ou une étagère et parameters sont des parametres à appliquer à la demande.
//source: https://developers.google.com/books/docs/v1/using#query-params

Le format des extensions du chemin de ressourceID  vous laisse vous identifier la resource que vous opérez actuellement dessus:
Exemples:

https://www.googleapis.com/books/v1/volumes
https://www.googleapis.com/books/v1/volumes/volumeId
https://www.googleapis.com/books/v1/mylibrary/bookshelves
https://www.googleapis.com/books/v1/mylibrary/bookshelves/shelf
https://www.googleapis.com/books/v1/mylibrary/bookshelves/shelf/volumes
...

Notez que les opérations avec mylibrary dans le URI applique seulement aux données de la bibliothèque de l'utilisateur privée actuellement authentifié. La série de URI est utilisée pour chaque opération supporté dans l'API est résumé dans le document de Books API reference
//source: https://developers.google.com/books/docs/v1/reference/

Ici, il ya deux exemples de comment çà marche dans le GB API:
Effectuer une recherche pour "quilting":
GET https://www.googleapis.com/books/v1/volumes?q=quilting

Avoir une information dans le volume s1gVAAAAYAAJ:
GET https://www.googleapis.com/books/v1/volumes/s1gVAAAAYAAJ

REST de Javascript

Vous pouvez invoquer le GB API en utilisant RESTde Javascript(aussi appelé JSON-P), en utilisant la requete callback query parameter et fonction callback. Ce qui vous permet d'enrichir des applications qui affichent des données GB sans rien écrire du coté serveur.

Exemple d'une approche pour montrer des resultats de recherche pour Harry Potter:
<html>
  <head>
    <title>Books API Example</title>
  </head>
  <body>
    <div id="content"></div>
    <script>
      function handleResponse(response) {
      for (var i = 0; i < response.items.length; i++) {
        var item = response.items[i];
        // in production code, item.text should have the HTML entities escaped.
        document.getElementById("content").innerHTML += "<br>" + item.volumeInfo.title;
      }
    }
    </script>
    <script src="https://www.googleapis.com/books/v1/volumes?q=harry+potter&callback=handleResponse"></script>
  </body>
</html>

DATA format

JSON
...
http://www.json.org/



